// Copyright (c) 2021 Kaplas
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

namespace Tests
{
    using System;
    using AoTBinLib.Enums;
    using AoTBinLib.Exceptions;
    using NUnit.Framework;
    using Yarhl.IO;

    public class StandardBinReaderTests
    {
        [Test]
        public void NullSourceThrowsException()
        {
            var reader = new AoTBinLib.Converters.StandardBinReader();
            Assert.Throws<ArgumentNullException>(() => reader.Convert(null));
        }

        [Test]
        public void IncompleteHeaderThrowsException()
        {
            var reader = new AoTBinLib.Converters.StandardBinReader();
            byte[] data = { 0xF9, 0x7D, 0x07, 0x00 };
            using DataStream stream = DataStreamFactory.FromArray(data, 0, data.Length);
            var format = new BinaryFormat(stream);
            Assert.Throws<FormatException>(() => reader.Convert(format));
        }

        [Test]
        public void BadMagicThrowsException()
        {
            var reader = new AoTBinLib.Converters.StandardBinReader();
            byte[] data = { 0xF9, 0x7D, 0x07, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
            using DataStream stream = DataStreamFactory.FromArray(data, 0, data.Length);
            var format = new BinaryFormat(stream);
            Assert.Throws<FormatException>(() => reader.Convert(format));
        }

        [Test]
        public void CanReadEmptyFiles()
        {
            var reader = new AoTBinLib.Converters.StandardBinReader();
            byte[] data =
            {
                0xF9, 0x7D, 0x07, 0x00, 0x01, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            };
            using DataStream stream = DataStreamFactory.FromArray(data, 0, data.Length);
            var format = new BinaryFormat(stream);
            var result = reader.Convert(format);
            Assert.AreEqual(2, result.Root.Children.Count);
            Assert.AreEqual(FileType.Empty, result.Root.Children[0].Tags["Type"]);
        }

        [Test]
        public void CanReadDummyFiles()
        {
            var reader = new AoTBinLib.Converters.StandardBinReader();
            var parameters = new AoTBinLib.Converters.ReaderParameters
            {
                Endianness = EndiannessMode.BigEndian,
                FileNames = Array.Empty<string>(),
            };
            reader.Initialize(parameters);

            byte[] data =
            {
                0x00, 0x07, 0x7D, 0xF9, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x70, 0x83, 0x5F, 0x83, 0x7E,
                0x83, 0x5F, 0x83, 0x7E, 0x81, 0x5B, 0x82, 0xC5, 0x82, 0xB7, 0x2E, 0x0D, 0x0A, 0x90, 0xB3, 0x8E,
                0xAE, 0x82, 0xC8, 0x83, 0x66, 0x81, 0x5B, 0x83, 0x5E, 0x82, 0xAA, 0x93, 0xFC, 0x82, 0xE9, 0x82,
                0xDC, 0x82, 0xC5, 0x81, 0x41, 0x82, 0xD0, 0x82, 0xC6, 0x82, 0xDC, 0x82, 0xB8, 0x83, 0x8A, 0x83,
                0x93, 0x83, 0x4E, 0x83, 0x66, 0x81, 0x5B, 0x83, 0x5E, 0x82, 0xF0, 0x8D, 0xEC, 0x90, 0xAC, 0x82,
                0xB7, 0x82, 0xE9, 0x82, 0xBD, 0x82, 0xDF, 0x82, 0xCC, 0x83, 0x5F, 0x83, 0x7E, 0x81, 0x5B, 0x83,
                0x74, 0x83, 0x40, 0x83, 0x43, 0x83, 0x8B, 0x82, 0xC6, 0x82, 0xB5, 0x82, 0xC4, 0x8D, 0xEC, 0x90,
                0xAC, 0x82, 0xB3, 0x82, 0xEA, 0x82, 0xC4, 0x82, 0xA2, 0x82, 0xDC, 0x82, 0xB7, 0x2E, 0x0D, 0x0A,
            };
            using DataStream stream = DataStreamFactory.FromArray(data, 0, data.Length);
            var format = new BinaryFormat(stream);

            var result = reader.Convert(format);
            Assert.AreEqual(2, result.Root.Children.Count);
            Assert.AreEqual(FileType.Dummy, result.Root.Children[0].Tags["Type"]);
        }

        [Test]
        public void CanReadUncompressedFiles()
        {
            var reader = new AoTBinLib.Converters.StandardBinReader();
            byte[] data =
            {
                0xF9, 0x7D, 0x07, 0x00, 0x01, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0xBA, 0xAD, 0xF0, 0x0D, 0xBA, 0xAD, 0xF0, 0x0D, 0xBA, 0xAD, 0xF0, 0x0D, 0xBA, 0xAD, 0xF0, 0x0D,
            };
            using DataStream stream = DataStreamFactory.FromArray(data, 0, data.Length);
            var format = new BinaryFormat(stream);

            var result = reader.Convert(format);
            Assert.AreEqual(2, result.Root.Children.Count);
            Assert.AreEqual(FileType.Normal, result.Root.Children[0].Tags["Type"]);
        }

        [Test]
        public void CanReadCompressedFiles()
        {
            var reader = new AoTBinLib.Converters.StandardBinReader();
            byte[] data =
            {
                0xF9, 0x7D, 0x07, 0x00, 0x01, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x79, 0x02, 0x00, 0x00, 0x50, 0x29, 0x00, 0x00,
                0x50, 0x29, 0x00, 0x00, 0x6D, 0x02, 0x00, 0x00, 0x78, 0xDA, 0xED, 0xD8, 0x4B, 0x4B, 0x1B, 0x51,
                0x14, 0x07, 0xF0, 0x33, 0xA6, 0x82, 0xD4, 0xB6, 0x46, 0x63, 0x52, 0x17, 0xA5, 0x64, 0x5D, 0x5C,
                0x14, 0xE3, 0xA3, 0x82, 0x90, 0xC9, 0x74, 0xD3, 0x82, 0x8B, 0x8A, 0x22, 0x18, 0x1F, 0xCD, 0x22,
                0x04, 0x29, 0xD4, 0x88, 0xB8, 0x51, 0x10, 0xA3, 0xED, 0xC2, 0x45, 0x16, 0x2E, 0xFC, 0x00, 0xF9,
                0x08, 0x82, 0x9B, 0x3E, 0x16, 0xCD, 0x32, 0x8B, 0x16, 0xFC, 0x08, 0xAE, 0x4A, 0x97, 0x2E, 0xBA,
                0x8F, 0x67, 0x66, 0xEE, 0xDC, 0x19, 0x43, 0x26, 0x93, 0xC4, 0xFC, 0x8B, 0x53, 0x6E, 0xE0, 0xE6,
                0x41, 0x72, 0x7F, 0x1C, 0xFE, 0xE7, 0xCE, 0x70, 0x6F, 0xB6, 0xE8, 0xF6, 0x63, 0xC1, 0x7A, 0xEE,
                0xE7, 0x31, 0xAE, 0x6D, 0xF2, 0x73, 0x5D, 0x3C, 0x88, 0x4A, 0x3A, 0x91, 0x9E, 0x21, 0xAA, 0xF0,
                0x18, 0x30, 0xF8, 0x33, 0xBF, 0x9E, 0xF2, 0x28, 0xA5, 0xC5, 0xF8, 0x61, 0xBF, 0x6A, 0xD6, 0x1C,
                0xD2, 0xFA, 0x22, 0xF6, 0xBC, 0x39, 0xCA, 0xD3, 0x00, 0x3D, 0x27, 0xF3, 0xBD, 0xED, 0x6B, 0xD2,
                0xD7, 0x20, 0xBE, 0x53, 0x7F, 0x0E, 0x54, 0xBF, 0xE3, 0xEF, 0x83, 0xFD, 0x93, 0x90, 0xE7, 0xBF,
                0x0B, 0xCE, 0x27, 0x07, 0xCE, 0x27, 0x0F, 0xCA, 0xC7, 0xF1, 0xB3, 0x60, 0xFF, 0x3E, 0x5F, 0x5F,
                0xF5, 0x3A, 0xFB, 0xD4, 0xDA, 0x2F, 0x82, 0xD7, 0xCF, 0x01, 0xD8, 0xDF, 0x03, 0xFB, 0xE8, 0xFB,
                0xF3, 0x06, 0x78, 0xFD, 0x7C, 0x02, 0xE7, 0xB3, 0x0B, 0xCE, 0xE7, 0x3D, 0x38, 0x9F, 0xC3, 0x90,
                0xAF, 0x7F, 0xF4, 0xFD, 0xFF, 0x38, 0xE4, 0xEB, 0x7F, 0x27, 0xE4, 0xFD, 0x2D, 0x82, 0xF3, 0x2F,
                0x84, 0xFC, 0xFA, 0x42, 0xF7, 0xB7, 0x0C, 0xF6, 0x8F, 0xC0, 0xFE, 0x0A, 0xD8, 0xFF, 0x70, 0xB7,
                0xFD, 0x89, 0xB9, 0x3D, 0x69, 0xE9, 0x2F, 0x83, 0xFD, 0xCD, 0x90, 0xAF, 0xCF, 0x0D, 0xF0, 0xFD,
                0x21, 0x17, 0xD2, 0xFD, 0x33, 0x7A, 0xFF, 0xEF, 0xE4, 0xBF, 0x4E, 0x2F, 0x1A, 0xFC, 0xAA, 0x1E,
                0xEC, 0x3B, 0x33, 0xFC, 0xD7, 0xA7, 0x5B, 0x3F, 0xC6, 0x57, 0xF5, 0xDF, 0x8F, 0xFA, 0x33, 0xE0,
                0xFA, 0xD3, 0x20, 0xFF, 0xA1, 0xF0, 0x97, 0x68, 0xC2, 0xE3, 0x9B, 0xD7, 0xD6, 0xA5, 0xB0, 0xFD,
                0x7D, 0xF9, 0x7B, 0x39, 0x2F, 0x6B, 0xC9, 0xF6, 0x7B, 0xA2, 0xB7, 0x3C, 0x06, 0x85, 0xFF, 0x57,
                0x4B, 0x75, 0x74, 0xFD, 0x16, 0x0A, 0xBF, 0xD3, 0x7D, 0x14, 0xEC, 0x3F, 0x12, 0xFE, 0x9F, 0xC8,
                0x64, 0x47, 0x7E, 0x2A, 0x75, 0xD1, 0x96, 0xFF, 0x58, 0xE6, 0x33, 0x45, 0x5F, 0x9C, 0xDF, 0x53,
                0x85, 0xFD, 0x6D, 0x76, 0x13, 0xAF, 0x6D, 0xFF, 0x33, 0x8F, 0x33, 0xA3, 0x31, 0x9F, 0x20, 0x9F,
                0x0B, 0xA2, 0x27, 0xD2, 0x9F, 0xA6, 0xAF, 0xD2, 0x4F, 0x66, 0xDA, 0xF3, 0x1F, 0x50, 0x90, 0x3F,
                0x24, 0xFD, 0x19, 0x88, 0x1F, 0xE5, 0x75, 0x63, 0xFB, 0xAF, 0x20, 0xFE, 0x30, 0xD7, 0x3F, 0x61,
                0xF9, 0xB3, 0x3D, 0xF7, 0xFD, 0xFB, 0xDB, 0xBB, 0xFA, 0x55, 0x7F, 0x83, 0xFB, 0x4B, 0xAA, 0xBF,
                0xAA, 0xBF, 0xAA, 0xBF, 0xAA, 0xBF, 0xAA, 0xBF, 0xAA, 0xBF, 0xAA, 0xBF, 0xFF, 0x4D, 0x7F, 0x4D,
                0x7F, 0x44, 0xF8, 0xE3, 0xDA, 0xA2, 0xC7, 0x37, 0xF7, 0xE6, 0xD7, 0x9E, 0x33, 0x46, 0x8D, 0x47,
                0xB4, 0x89, 0x1F, 0xB1, 0x66, 0x44, 0x87, 0x47, 0x62, 0xA3, 0xF1, 0xC4, 0xD3, 0x66, 0x7E, 0x4C,
                0xFA, 0x4B, 0x1E, 0xFF, 0x25, 0x7F, 0x75, 0xC5, 0xA3, 0xEA, 0xF1, 0xA9, 0x2B, 0xBF, 0x79, 0xFD,
                0x49, 0x51, 0xFB, 0xB9, 0xC7, 0xBF, 0xB2, 0xCE, 0x17, 0xBF, 0x7E, 0xCE, 0xF7, 0xC0, 0x37, 0xCF,
                0x2A, 0x93, 0x6C, 0x3E, 0x33, 0x5C, 0x7F, 0x4C, 0xD4, 0x4F, 0x7A, 0x37, 0x7E, 0x8D, 0x16, 0xE9,
                0x9B, 0x7B, 0x7E, 0x11, 0xFD, 0x7D, 0x27, 0xFC, 0xB2, 0x61, 0x67, 0xD5, 0x99, 0xBF, 0xE0, 0xF1,
                0xF3, 0xEC, 0x7F, 0x77, 0xFB, 0xCB, 0xDE, 0x35, 0x8F, 0x4B, 0xE1, 0xBF, 0x31, 0xDC, 0xF3, 0x57,
                0xB5, 0xA3, 0x7C, 0xE2, 0x72, 0x7D, 0xAE, 0x78, 0xCE, 0x77, 0xC9, 0x86, 0xF5, 0x63, 0x7E, 0xD6,
                0x7D, 0xCF, 0xA7, 0xED, 0xF9, 0x59, 0xB0, 0xBF, 0x0A, 0xF6, 0xD7, 0xC0, 0x7E, 0xAB, 0xFC, 0x5B,
                0xFF, 0x3F, 0x70, 0xF7, 0xFC, 0x7B, 0xE1, 0xAF, 0x82, 0xFD, 0x35, 0xB0, 0xAF, 0xF2, 0x57, 0xF9,
                0xAB, 0xFC, 0x55, 0xFE, 0xFF, 0x36, 0xFF, 0x84, 0xF4, 0x3F, 0x76, 0xED, 0xD7, 0x7D, 0xF6, 0x87,
                0x37, 0xB8, 0x1E, 0xED, 0x93, 0x00, 0x00, 0x00, 0x00,
            };
            using DataStream stream = DataStreamFactory.FromArray(data, 0, data.Length);
            var format = new BinaryFormat(stream);

            var result = reader.Convert(format);
            Assert.AreEqual(2, result.Root.Children.Count);
            Assert.AreEqual(FileType.Compressed, result.Root.Children[0].Tags["Type"]);
        }

        [Test]
        public void BadCompressedFilesThrowsException()
        {
            var reader = new AoTBinLib.Converters.StandardBinReader();
            byte[] data =
            {
                0xF9, 0x7D, 0x07, 0x00, 0x01, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x79, 0x02, 0x00, 0x00, 0x50, 0x29, 0x00, 0x00,
                0x51, 0x29, 0x00, 0x00, 0x6D, 0x02, 0x00, 0x00, 0x78, 0xDA, 0xED, 0xD8, 0x4B, 0x4B, 0x1B, 0x51,
                0x14, 0x07, 0xF0, 0x33, 0xA6, 0x82, 0xD4, 0xB6, 0x46, 0x63, 0x52, 0x17, 0xA5, 0x64, 0x5D, 0x5C,
                0x14, 0xE3, 0xA3, 0x82, 0x90, 0xC9, 0x74, 0xD3, 0x82, 0x8B, 0x8A, 0x22, 0x18, 0x1F, 0xCD, 0x22,
                0x04, 0x29, 0xD4, 0x88, 0xB8, 0x51, 0x10, 0xA3, 0xED, 0xC2, 0x45, 0x16, 0x2E, 0xFC, 0x00, 0xF9,
                0x08, 0x82, 0x9B, 0x3E, 0x16, 0xCD, 0x32, 0x8B, 0x16, 0xFC, 0x08, 0xAE, 0x4A, 0x97, 0x2E, 0xBA,
                0x8F, 0x67, 0x66, 0xEE, 0xDC, 0x19, 0x43, 0x26, 0x93, 0xC4, 0xFC, 0x8B, 0x53, 0x6E, 0xE0, 0xE6,
                0x41, 0x72, 0x7F, 0x1C, 0xFE, 0xE7, 0xCE, 0x70, 0x6F, 0xB6, 0xE8, 0xF6, 0x63, 0xC1, 0x7A, 0xEE,
                0xE7, 0x31, 0xAE, 0x6D, 0xF2, 0x73, 0x5D, 0x3C, 0x88, 0x4A, 0x3A, 0x91, 0x9E, 0x21, 0xAA, 0xF0,
                0x18, 0x30, 0xF8, 0x33, 0xBF, 0x9E, 0xF2, 0x28, 0xA5, 0xC5, 0xF8, 0x61, 0xBF, 0x6A, 0xD6, 0x1C,
                0xD2, 0xFA, 0x22, 0xF6, 0xBC, 0x39, 0xCA, 0xD3, 0x00, 0x3D, 0x27, 0xF3, 0xBD, 0xED, 0x6B, 0xD2,
                0xD7, 0x20, 0xBE, 0x53, 0x7F, 0x0E, 0x54, 0xBF, 0xE3, 0xEF, 0x83, 0xFD, 0x93, 0x90, 0xE7, 0xBF,
                0x0B, 0xCE, 0x27, 0x07, 0xCE, 0x27, 0x0F, 0xCA, 0xC7, 0xF1, 0xB3, 0x60, 0xFF, 0x3E, 0x5F, 0x5F,
                0xF5, 0x3A, 0xFB, 0xD4, 0xDA, 0x2F, 0x82, 0xD7, 0xCF, 0x01, 0xD8, 0xDF, 0x03, 0xFB, 0xE8, 0xFB,
                0xF3, 0x06, 0x78, 0xFD, 0x7C, 0x02, 0xE7, 0xB3, 0x0B, 0xCE, 0xE7, 0x3D, 0x38, 0x9F, 0xC3, 0x90,
                0xAF, 0x7F, 0xF4, 0xFD, 0xFF, 0x38, 0xE4, 0xEB, 0x7F, 0x27, 0xE4, 0xFD, 0x2D, 0x82, 0xF3, 0x2F,
                0x84, 0xFC, 0xFA, 0x42, 0xF7, 0xB7, 0x0C, 0xF6, 0x8F, 0xC0, 0xFE, 0x0A, 0xD8, 0xFF, 0x70, 0xB7,
                0xFD, 0x89, 0xB9, 0x3D, 0x69, 0xE9, 0x2F, 0x83, 0xFD, 0xCD, 0x90, 0xAF, 0xCF, 0x0D, 0xF0, 0xFD,
                0x21, 0x17, 0xD2, 0xFD, 0x33, 0x7A, 0xFF, 0xEF, 0xE4, 0xBF, 0x4E, 0x2F, 0x1A, 0xFC, 0xAA, 0x1E,
                0xEC, 0x3B, 0x33, 0xFC, 0xD7, 0xA7, 0x5B, 0x3F, 0xC6, 0x57, 0xF5, 0xDF, 0x8F, 0xFA, 0x33, 0xE0,
                0xFA, 0xD3, 0x20, 0xFF, 0xA1, 0xF0, 0x97, 0x68, 0xC2, 0xE3, 0x9B, 0xD7, 0xD6, 0xA5, 0xB0, 0xFD,
                0x7D, 0xF9, 0x7B, 0x39, 0x2F, 0x6B, 0xC9, 0xF6, 0x7B, 0xA2, 0xB7, 0x3C, 0x06, 0x85, 0xFF, 0x57,
                0x4B, 0x75, 0x74, 0xFD, 0x16, 0x0A, 0xBF, 0xD3, 0x7D, 0x14, 0xEC, 0x3F, 0x12, 0xFE, 0x9F, 0xC8,
                0x64, 0x47, 0x7E, 0x2A, 0x75, 0xD1, 0x96, 0xFF, 0x58, 0xE6, 0x33, 0x45, 0x5F, 0x9C, 0xDF, 0x53,
                0x85, 0xFD, 0x6D, 0x76, 0x13, 0xAF, 0x6D, 0xFF, 0x33, 0x8F, 0x33, 0xA3, 0x31, 0x9F, 0x20, 0x9F,
                0x0B, 0xA2, 0x27, 0xD2, 0x9F, 0xA6, 0xAF, 0xD2, 0x4F, 0x66, 0xDA, 0xF3, 0x1F, 0x50, 0x90, 0x3F,
                0x24, 0xFD, 0x19, 0x88, 0x1F, 0xE5, 0x75, 0x63, 0xFB, 0xAF, 0x20, 0xFE, 0x30, 0xD7, 0x3F, 0x61,
                0xF9, 0xB3, 0x3D, 0xF7, 0xFD, 0xFB, 0xDB, 0xBB, 0xFA, 0x55, 0x7F, 0x83, 0xFB, 0x4B, 0xAA, 0xBF,
                0xAA, 0xBF, 0xAA, 0xBF, 0xAA, 0xBF, 0xAA, 0xBF, 0xAA, 0xBF, 0xAA, 0xBF, 0xFF, 0x4D, 0x7F, 0x4D,
                0x7F, 0x44, 0xF8, 0xE3, 0xDA, 0xA2, 0xC7, 0x37, 0xF7, 0xE6, 0xD7, 0x9E, 0x33, 0x46, 0x8D, 0x47,
                0xB4, 0x89, 0x1F, 0xB1, 0x66, 0x44, 0x87, 0x47, 0x62, 0xA3, 0xF1, 0xC4, 0xD3, 0x66, 0x7E, 0x4C,
                0xFA, 0x4B, 0x1E, 0xFF, 0x25, 0x7F, 0x75, 0xC5, 0xA3, 0xEA, 0xF1, 0xA9, 0x2B, 0xBF, 0x79, 0xFD,
                0x49, 0x51, 0xFB, 0xB9, 0xC7, 0xBF, 0xB2, 0xCE, 0x17, 0xBF, 0x7E, 0xCE, 0xF7, 0xC0, 0x37, 0xCF,
                0x2A, 0x93, 0x6C, 0x3E, 0x33, 0x5C, 0x7F, 0x4C, 0xD4, 0x4F, 0x7A, 0x37, 0x7E, 0x8D, 0x16, 0xE9,
                0x9B, 0x7B, 0x7E, 0x11, 0xFD, 0x7D, 0x27, 0xFC, 0xB2, 0x61, 0x67, 0xD5, 0x99, 0xBF, 0xE0, 0xF1,
                0xF3, 0xEC, 0x7F, 0x77, 0xFB, 0xCB, 0xDE, 0x35, 0x8F, 0x4B, 0xE1, 0xBF, 0x31, 0xDC, 0xF3, 0x57,
                0xB5, 0xA3, 0x7C, 0xE2, 0x72, 0x7D, 0xAE, 0x78, 0xCE, 0x77, 0xC9, 0x86, 0xF5, 0x63, 0x7E, 0xD6,
                0x7D, 0xCF, 0xA7, 0xED, 0xF9, 0x59, 0xB0, 0xBF, 0x0A, 0xF6, 0xD7, 0xC0, 0x7E, 0xAB, 0xFC, 0x5B,
                0xFF, 0x3F, 0x70, 0xF7, 0xFC, 0x7B, 0xE1, 0xAF, 0x82, 0xFD, 0x35, 0xB0, 0xAF, 0xF2, 0x57, 0xF9,
                0xAB, 0xFC, 0x55, 0xFE, 0xFF, 0x36, 0xFF, 0x84, 0xF4, 0x3F, 0x76, 0xED, 0xD7, 0x7D, 0xF6, 0x87,
                0x37, 0xB8, 0x1E, 0xED, 0x93, 0x00, 0x00, 0x00, 0x00,
            };
            using DataStream stream = DataStreamFactory.FromArray(data, 0, data.Length);
            var format = new BinaryFormat(stream);

            Assert.Throws<ExtractionException>(() => reader.Convert(format));
        }

        [Test]
        public void CanReadCompressedFilesChangingEndianness()
        {
            var reader = new AoTBinLib.Converters.StandardBinReader();
            var parameters = new AoTBinLib.Converters.ReaderParameters
            {
                Endianness = EndiannessMode.BigEndian,
                FileNames = Array.Empty<string>(),
            };
            reader.Initialize(parameters);

            // BIN is Big Endian but has a file in Little Endian
            using DataStream stream = DataStreamFactory.FromFile("MultiEndianTests.bin", FileOpenMode.Read);
            var format = new BinaryFormat(stream);

            var result = reader.Convert(format);
            Assert.AreEqual(3, result.Root.Children.Count);
            Assert.AreEqual(FileType.Normal, result.Root.Children[0].Tags["Type"]);
            Assert.AreEqual(FileType.CompressedAlternateEndian, result.Root.Children[1].Tags["Type"]);
        }

        [Test]
        public void CanSetFileNames()
        {
            var reader = new AoTBinLib.Converters.StandardBinReader();
            var parameters = new AoTBinLib.Converters.ReaderParameters
            {
                Endianness = EndiannessMode.LittleEndian,
                FileNames = new string[] { "test/file1" },
            };
            reader.Initialize(parameters);

            byte[] data =
            {
                0xF9, 0x7D, 0x07, 0x00, 0x01, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0xBA, 0xAD, 0xF0, 0x0D, 0xBA, 0xAD, 0xF0, 0x0D, 0xBA, 0xAD, 0xF0, 0x0D, 0xBA, 0xAD, 0xF0, 0x0D,
            };
            using DataStream stream = DataStreamFactory.FromArray(data, 0, data.Length);
            var format = new BinaryFormat(stream);

            var result = reader.Convert(format);
            Assert.AreEqual(2, result.Root.Children.Count);
            Assert.AreEqual("test", result.Root.Children[0].Name);
            Assert.AreEqual(1, result.Root.Children[0].Children.Count);
            Assert.AreEqual(FileType.Normal, result.Root.Children[0].Children[0].Tags["Type"]);
            Assert.AreEqual("file1", result.Root.Children[0].Children[0].Name);
        }
    }
}
